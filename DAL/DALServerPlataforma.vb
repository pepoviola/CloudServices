'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''  DALServerPlataforma.vb
''  Implementation of the Class DALServerPlataforma
''  Generated by Enterprise Architect
''  Created on:      21-Jun-2014 12:05:18 AM
''  Original author: pepo
''  
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''  Modification history:
''  
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Public Class DALServerPlataforma


    ''' 
    ''' <param name="oServer"></param>
    Public Function Actualizar(ByVal oServer As BE.BEServerPlataforma) As Boolean
        Dim conn As IDbConnection = dbManager.getConnection
        Dim registros As Integer
        Try
            'obtengo el command
            Dim cmd As IDbCommand = dbManager.getCmd("UpdateServerPlataforma")
            'asocio la cx
            cmd.Connection = conn
            'abro cx
            conn.Open()
            'agrego params
            dbManager.addParam(cmd, "@id", oServer.Id)
            dbManager.addParam(cmd, "@hostname", oServer.Hostname)
            dbManager.addParam(cmd, "@memoria", oServer.Memoria)
            dbManager.addParam(cmd, "@qcpu", oServer.Q_cpu)
            registros = cmd.ExecuteNonQuery()
            Return True

        Catch ex As Exception
            Throw ex
        Finally
            conn.Close()
        End Try
    End Function

    ''' 
    ''' <param name="oServer"></param>
    Public Function Crear(ByVal oServer As BE.BEServerPlataforma) As Boolean
        Dim conn As IDbConnection = dbManager.getConnection
        Dim registros As Integer
        Try
            'obtengo el command
            Dim cmd As IDbCommand = dbManager.getCmd("InsertServerPlataforma")
            'asocio la cx
            cmd.Connection = conn
            'abro cx
            conn.Open()
            'agrego params
            dbManager.addParam(cmd, "@hostname", oServer.Hostname)
            dbManager.addParam(cmd, "@memoria", oServer.Memoria)
            dbManager.addParam(cmd, "@qcpu", oServer.Q_cpu)
            registros = cmd.ExecuteNonQuery()
            Return True

        Catch ex As Exception
            Throw ex
        Finally
            conn.Close()
        End Try
    End Function

    ''' 
    ''' <param name="oServer"></param>
    Public Function Eliminar(ByVal oServer As BE.BEServerPlataforma) As Boolean
        Dim conn As IDbConnection = dbManager.getConnection
        Dim registros As Integer
        Try
            'obtengo el command
            Dim cmd As IDbCommand = dbManager.getCmd("DeleteServerPlataforma")
            'asocio la cx
            cmd.Connection = conn
            'abro cx
            conn.Open()
            'agrego params
            dbManager.addParam(cmd, "@id", oServer.Id)
            registros = cmd.ExecuteNonQuery()
            Return True

        Catch ex As Exception
            Throw ex
        Finally
            conn.Close()
        End Try

    End Function

    ''' 
    ''' <param name="oServer"></param>
    Public Function Filtrar(ByVal oServer As BE.BEServerPlataforma) As List(Of BE.BEServerPlataforma)
        Dim servers As List(Of BE.BEServerPlataforma) = New List(Of BE.BEServerPlataforma)
        Dim conn As IDbConnection = dbManager.getConnection
        Try
            Dim cmd As IDbCommand = dbManager.getCmd("SelectPlatformServers")
            'asocio la cx
            cmd.Connection = conn
            'agrego los params 
            If Not oServer Is Nothing AndAlso Not oServer.Id = 0 Then
                dbManager.addParam(cmd, "@Id", oServer.Id)
            Else
                dbManager.addParam(cmd, "@Id", DBNull.Value)
            End If

            If Not oServer Is Nothing AndAlso Not String.IsNullOrEmpty(oServer.Hostname) Then
                dbManager.addParam(cmd, "@Hostname", oServer.Hostname)
            Else
                dbManager.addParam(cmd, "@Hostname", DBNull.Value)
            End If
            '
            'ado dx
            Dim da As SqlClient.SqlDataAdapter = New SqlClient.SqlDataAdapter(cmd)
            Dim ds As DataSet = New DataSet
            Dim dt As DataTable = New DataTable
            da.Fill(ds)
            For Each lector As DataRow In ds.Tables(0).Rows
                Dim s As BE.BEServerPlataforma = New BE.BEServerPlataforma
                s.Hostname = Convert.ToString(lector("Hostname"))
                s.Id = Convert.ToInt32(lector("Id"))
                s.Memoria = Convert.ToInt32(lector("Memoria"))
                s.Q_cpu = Convert.ToInt32(lector("Qcpu"))

                servers.Add(s)
            Next
            Return servers
        Catch ex As Exception
            Throw ex
        Finally
            conn.Close()
            servers = Nothing
        End Try
    End Function


End Class ' DALServerPlataforma
